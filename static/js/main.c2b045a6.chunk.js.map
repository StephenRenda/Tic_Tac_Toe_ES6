{"version":3,"sources":["constants.js","utils.js","Board.js","minimax.js","styles.js","ResultModal.js","TicTacToe.js","App.js","serviceWorker.js","index.js"],"names":["GAME_STATES","GAME_MODES","easy","medium","difficult","SCORES","1","0","2","getRandomInt","min","max","Math","ceil","floor","random","switchPlayer","player","Board","grid","makeMove","square","getEmptySquares","squares","forEach","i","push","isEmpty","length","getWinner","winningCombos","res","el","winningIndex","clone","concat","getStrikethroughStyles","this","Array","fill","minimax","board","thisScore","mult","maxScore","bestMove","empty","copy","border","customStyles","overlay","backgroundColor","ResultModal","isOpen","close","startNewGame","winner","StyledModal","onRequestClose","style","ModalWrapper","ModalTitle","ModalContent","ModalFooter","Button","onClick","styled","Modal","div","p","button","arr","ButtonRow","Screen","Inner","ChooseText","Container","dims","Square","Marker","Strikethrough","styles","TicTacToe","useState","setGrid","human","computer","players","setPlayers","gameState","setGameState","nextMove","setNextMove","setWinner","mode","setMode","modalOpen","setModalOpen","move","useCallback","index","gridCopy","computerMove","emptyIndices","includes","useEffect","timeout","setTimeout","clearTimeout","winnerStr","declareWinner","choosePlayer","option","onChange","e","target","value","Object","keys","map","key","gameMode","isActive","humanMove","Main","main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2b045a6.chunk.js","sourcesContent":["// Dimensions of the board (3x3 squares), game outcomes and players,\r\n// and dimensions for the board squares, in pixels.\r\n\r\nexport const DIMS = 3;\r\nexport const DRAW = 0;\r\nexport const PLAYER_X = 1;\r\nexport const PLAYER_O = 2;\r\nexport const SQUARE_DIMS = 100;\r\n\r\nexport const GAME_STATES = {\r\n  notStarted: \"not_started\",\r\n  inProgress: \"in_progress\",\r\n  over: \"over\",\r\n};\r\n\r\nexport const GAME_MODES = {\r\n  easy: \"easy\",\r\n  medium: \"medium\",\r\n  difficult: \"difficult\",\r\n};\r\n\r\nexport const SCORES = {\r\n  1: 1,\r\n  0: 0,\r\n  2: -1,\r\n};\r\n","import { PLAYER_O, PLAYER_X } from \"./constants\";\r\n\r\n// Get random integer in a range min-max\r\nexport const getRandomInt = (min, max) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\n\r\nexport const switchPlayer = (player) => {\r\n  return player === PLAYER_X ? PLAYER_O : PLAYER_X;\r\n};\r\n","import { DIMS, DRAW } from \"./constants\";\r\n\r\nexport default class Board {\r\n  constructor(grid) {\r\n    this.grid = grid || new Array(DIMS ** 2).fill(null);\r\n    this.winningIndex = null; // track the index of winning combination\r\n  }\r\n\r\n  makeMove = (square, player) => {\r\n    if (this.grid[square] === null) {\r\n      this.grid[square] = player;\r\n    }\r\n  };\r\n\r\n  // Collect indices of empty squares and return them\r\n  getEmptySquares = (grid = this.grid) => {\r\n    let squares = [];\r\n    grid.forEach((square, i) => {\r\n      if (square === null) squares.push(i);\r\n    });\r\n    return squares;\r\n  };\r\n\r\n  isEmpty = (grid = this.grid) => {\r\n    return this.getEmptySquares(grid).length === DIMS ** 2;\r\n  };\r\n\r\n  getWinner = (grid = this.grid) => {\r\n    const winningCombos = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    let res = null;\r\n    winningCombos.forEach((el, i) => {\r\n      if (\r\n        grid[el[0]] !== null &&\r\n        grid[el[0]] === grid[el[1]] &&\r\n        grid[el[0]] === grid[el[2]]\r\n      ) {\r\n        res = grid[el[0]];\r\n        this.winningIndex = i;\r\n      } else if (res === null && this.getEmptySquares(grid).length === 0) {\r\n        res = DRAW;\r\n        this.winningIndex = null;\r\n      }\r\n    });\r\n    return res;\r\n  };\r\n\r\n  clone = () => {\r\n    return new Board(this.grid.concat());\r\n  };\r\n\r\n  getStrikethroughStyles = () => {\r\n    const defaultWidth = 285;\r\n    const diagonalWidth = 400;\r\n    switch (this.winningIndex) {\r\n      case 0:\r\n        return `\r\n          transform: none;\r\n          top: 41px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 1:\r\n        return `\r\n          transform: none;\r\n          top: 140px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 2:\r\n        return `\r\n          transform: none;\r\n          top: 242px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 3:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: -86px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 4:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: 15px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 5:\r\n        return `\r\n          transform: rotate(90deg);\r\n          top: 145px;\r\n          left: 115px;\r\n          width: ${defaultWidth}px;\r\n        `;\r\n      case 6:\r\n        return `\r\n          transform: rotate(45deg);\r\n          top: 145px;\r\n          left: -44px;\r\n          width: ${diagonalWidth}px;\r\n        `;\r\n      case 7:\r\n        return `\r\n          transform: rotate(-45deg);\r\n          top: 145px;\r\n          left: -46px;\r\n          width: ${diagonalWidth}px;\r\n        `;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","import { SCORES } from \"./constants\";\r\nimport { switchPlayer } from \"./utils\";\r\n\r\nexport const minimax = (board, player) => {\r\n  const mult = SCORES[player];\r\n  let thisScore;\r\n  let maxScore = -1;\r\n  let bestMove = null;\r\n\r\n  if (board.getWinner() !== null) {\r\n    return [SCORES[board.getWinner()], 0];\r\n  } else {\r\n    for (let empty of board.getEmptySquares()) {\r\n      let copy = board.clone();\r\n      copy.makeMove(empty, player);\r\n      thisScore = mult * minimax(copy, switchPlayer(player))[0];\r\n\r\n      if (thisScore >= maxScore) {\r\n        maxScore = thisScore;\r\n        bestMove = empty;\r\n      }\r\n    }\r\n\r\n    return [mult * maxScore, bestMove];\r\n  }\r\n};\r\n","export const border = `\r\n  border-bottom-left-radius: 15px 255px;\r\n  border-bottom-right-radius: 225px 15px;\r\n  border-top-left-radius: 255px 15px;\r\n  border-top-right-radius: 15px 225px;\r\n  border: 2px solid #41403e;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Modal from \"react-modal\";\r\nimport { border } from \"./styles\";\r\n\r\nconst customStyles = {\r\n  overlay: {\r\n    backgroundColor: \"rgba(0,0,0, 0.6)\",\r\n  },\r\n};\r\n\r\nexport const ResultModal = ({ isOpen, close, startNewGame, winner }) => {\r\n  return (\r\n    <StyledModal isOpen={isOpen} onRequestClose={close} style={customStyles}>\r\n      <ModalWrapper>\r\n        <ModalTitle>Game over</ModalTitle>\r\n        <ModalContent>{winner}</ModalContent>\r\n\r\n        <ModalFooter>\r\n          <Button onClick={close}>Close</Button>\r\n          <Button onClick={startNewGame}>Start over</Button>\r\n        </ModalFooter>\r\n      </ModalWrapper>\r\n    </StyledModal>\r\n  );\r\n};\r\n\r\nconst StyledModal = styled(Modal)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 300px;\r\n  position: relative;\r\n  margin: 0 auto;\r\n  top: 10%;\r\n  right: auto;\r\n  bottom: auto;\r\n  width: 320px;\r\n`;\r\n\r\nconst ModalWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 24px;\r\n  background-color: #fff;\r\n  max-height: 100%;\r\n  height: 100%;\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  padding: 1.25rem;\r\n  ${border}; // Adding new border styles\r\n`;\r\n\r\nconst ModalTitle = styled.p`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 20px;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n`;\r\n\r\nconst ModalContent = styled.p`\r\n  flex: 1 1 auto;\r\n  text-align: center;\r\n`;\r\n\r\nconst ModalFooter = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  flex: 0 0 auto;\r\n  width: 100%;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  font-size: 16px;\r\n`;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  DIMS,\r\n  PLAYER_X,\r\n  PLAYER_O,\r\n  SQUARE_DIMS,\r\n  DRAW,\r\n  GAME_STATES,\r\n  GAME_MODES,\r\n} from \"./constants\";\r\n\r\nimport { getRandomInt, switchPlayer } from \"./utils\";\r\nimport Board from \"./Board\";\r\nimport { minimax } from \"./minimax\";\r\nimport { ResultModal } from \"./ResultModal\";\r\nimport { border } from \"./styles\";\r\n\r\nconst arr = new Array(DIMS ** 2).fill(null);\r\nconst board = new Board();\r\n\r\nconst TicTacToe = () => {\r\n  const [grid, setGrid] = useState(arr);\r\n  const [players, setPlayers] = useState({ human: null, computer: null });\r\n  const [gameState, setGameState] = useState(GAME_STATES.notStarted);\r\n  const [nextMove, setNextMove] = useState(null);\r\n  const [winner, setWinner] = useState(null);\r\n  const [mode, setMode] = useState(GAME_MODES.medium);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n\r\n  const move = useCallback(\r\n    (index, player) => {\r\n      if (player && gameState === GAME_STATES.inProgress) {\r\n        setGrid((grid) => {\r\n          const gridCopy = grid.concat();\r\n          gridCopy[index] = player;\r\n          return gridCopy;\r\n        });\r\n      }\r\n    },\r\n    [gameState]\r\n  );\r\n\r\n  const computerMove = useCallback(() => {\r\n    // Important to pass a copy of the grid here\r\n    const board = new Board(grid.concat());\r\n    const emptyIndices = board.getEmptySquares(grid);\r\n    let index;\r\n\r\n    switch (mode) {\r\n      case GAME_MODES.easy:\r\n        index = getRandomInt(0, 8);\r\n        while (!emptyIndices.includes(index)) {\r\n          index = getRandomInt(0, 8);\r\n        }\r\n        break;\r\n      case GAME_MODES.medium:\r\n        // Medium level is basically ~half of the moves are minimax and the other ~half random\r\n        const smartMove = !board.isEmpty(grid) && Math.random() < 0.5;\r\n        if (smartMove) {\r\n          index = minimax(board, players.computer)[1];\r\n        } else {\r\n          index = getRandomInt(0, 8);\r\n          while (!emptyIndices.includes(index)) {\r\n            index = getRandomInt(0, 8);\r\n          }\r\n        }\r\n        break;\r\n      case GAME_MODES.difficult:\r\n      default:\r\n        index = board.isEmpty(grid)\r\n          ? getRandomInt(0, 8)\r\n          : minimax(board, players.computer)[1];\r\n    }\r\n    if (!grid[index]) {\r\n      move(index, players.computer);\r\n      setNextMove(players.human);\r\n    }\r\n  }, [move, grid, players, mode]);\r\n\r\n  const changeMode = (e) => {\r\n    setMode(e.target.value);\r\n  };\r\n\r\n  const humanMove = (index) => {\r\n    if (!grid[index] && nextMove === players.human) {\r\n      move(index, players.human);\r\n      setNextMove(players.computer);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    let timeout;\r\n    if (\r\n      nextMove !== null &&\r\n      nextMove === players.computer &&\r\n      gameState !== GAME_STATES.over\r\n    ) {\r\n      // Delay computer moves to make them more natural\r\n      timeout = setTimeout(() => {\r\n        computerMove();\r\n      }, 500);\r\n    }\r\n    return () => timeout && clearTimeout(timeout);\r\n  }, [nextMove, computerMove, players.computer, gameState]);\r\n\r\n  useEffect(() => {\r\n    const winner = board.getWinner(grid);\r\n    const declareWinner = (winner) => {\r\n      let winnerStr;\r\n      switch (winner) {\r\n        case PLAYER_X:\r\n          winnerStr = \"Player X wins!\";\r\n          break;\r\n        case PLAYER_O:\r\n          winnerStr = \"Player O wins!\";\r\n          break;\r\n        case DRAW:\r\n        default:\r\n          winnerStr = \"It's a draw\";\r\n      }\r\n      setGameState(GAME_STATES.over);\r\n      setWinner(winnerStr);\r\n      // Slight delay for the modal so there is some time to see the last move\r\n      setTimeout(() => setModalOpen(true), 300);\r\n    };\r\n\r\n    if (winner !== null && gameState !== GAME_STATES.over) {\r\n      declareWinner(winner);\r\n    }\r\n  }, [gameState, grid, nextMove]);\r\n\r\n  const choosePlayer = (option) => {\r\n    setPlayers({ human: option, computer: switchPlayer(option) });\r\n    setGameState(GAME_STATES.inProgress);\r\n    setNextMove(PLAYER_X); // Set the Player X to make the first move\r\n  };\r\n\r\n  const startNewGame = () => {\r\n    setGameState(GAME_STATES.notStarted);\r\n    setGrid(arr);\r\n    setModalOpen(false); // Close the modal when new game starts\r\n  };\r\n\r\n  return gameState === GAME_STATES.notStarted ? (\r\n    <Screen>\r\n      <Inner>\r\n        <ChooseText>Select difficulty</ChooseText>\r\n        <select onChange={changeMode} value={mode}>\r\n          {Object.keys(GAME_MODES).map((key) => {\r\n            const gameMode = GAME_MODES[key];\r\n            return (\r\n              <option key={gameMode} value={gameMode}>\r\n                {key}\r\n              </option>\r\n            );\r\n          })}\r\n        </select>\r\n      </Inner>\r\n      <Inner>\r\n        <ChooseText>Choose your player</ChooseText>\r\n        <ButtonRow>\r\n          <button onClick={() => choosePlayer(PLAYER_X)}>X</button>\r\n          <p>or</p>\r\n          <button onClick={() => choosePlayer(PLAYER_O)}>O</button>\r\n        </ButtonRow>\r\n      </Inner>\r\n    </Screen>\r\n  ) : (\r\n    <Container dims={DIMS}>\r\n      {grid.map((value, index) => {\r\n        const isActive = value !== null;\r\n\r\n        return (\r\n          <Square key={index} onClick={() => humanMove(index)}>\r\n            {isActive && <Marker>{value === PLAYER_X ? \"X\" : \"O\"}</Marker>}\r\n          </Square>\r\n        );\r\n      })}\r\n      <Strikethrough\r\n        styles={\r\n          gameState === GAME_STATES.over && board.getStrikethroughStyles()\r\n        }\r\n      />\r\n      <ResultModal\r\n        isOpen={modalOpen}\r\n        winner={winner}\r\n        close={() => setModalOpen(false)}\r\n        startNewGame={startNewGame}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst ButtonRow = styled.div`\r\n  display: flex;\r\n  width: 150px;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst Screen = styled.div``;\r\n\r\nconst Inner = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst ChooseText = styled.p``;\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  width: ${({ dims }) => `${dims * (SQUARE_DIMS + 5)}px`};\r\n  flex-flow: wrap;\r\n  position: relative;\r\n`;\r\n\r\nconst Square = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: ${SQUARE_DIMS}px;\r\n  height: ${SQUARE_DIMS}px;\r\n  ${border}; // Adding new border styles\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Marker = styled.p`\r\n  font-size: 68px;\r\n`;\r\n\r\nconst Strikethrough = styled.div`\r\n  position: absolute;\r\n  ${({ styles }) => styles}\r\n  background-color: indianred;\r\n  height: 5px;\r\n  width: ${({ styles }) => !styles && \"0px\"};\r\n`;\r\n\r\nexport default TicTacToe;\r\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport TicTacToe from \"./TicTacToe\";\nimport \"papercss/dist/paper.min.css\";\n\nfunction App() {\n  return (\n    <Main>\n      <TicTacToe />\n    </Main>\n  );\n}\n\nconst Main = styled.main`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}